package ui

import (
	"fmt"
	"strings"

	"github.com/charmbracelet/lipgloss"
)

// View renders the current view based on the view mode
func (m Model) View() string {
	switch m.viewMode {
	case ViewList:
		return m.renderListView()
	case ViewAddURL:
		return m.renderAddURLView()
	case ViewAddTitle:
		return m.renderAddTitleView()
	case ViewConfirmDelete:
		return m.renderConfirmDeleteView()
	case ViewImport:
		return m.renderImportView()
	case ViewImportResult:
		return m.renderImportResultView()
	case ViewBackups:
		return m.renderBackupsView()
	case ViewConfirmRestore:
		return m.renderConfirmRestoreView()
	default:
		return "Unknown view mode"
	}
}

func (m Model) renderListView() string {
	if m.searchMode {
		// Show list with search input at bottom
		var s strings.Builder
		s.WriteString(m.list.View())
		s.WriteString("\n")
		s.WriteString(m.getInputStyle().Render("–ü–æ–∏—Å–∫: " + m.textInput.View()))
		s.WriteString("\n")
		s.WriteString(m.formatKeyHelp("Enter", "–ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫", "Esc", "–æ—Ç–º–µ–Ω–∞"))
		return s.String()
	}
	return m.list.View()
}

func (m Model) renderAddURLView() string {
	var s strings.Builder
	s.WriteString(m.getHeaderStyle().Render("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç - –°—Å—ã–ª–∫–∞"))
	s.WriteString("\n\n")
	s.WriteString("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É:\n")
	s.WriteString(m.getInputStyle().Render(m.textInput.View()))
	s.WriteString("\n")

	// Show error message if there is one
	if m.urlError != "" {
		s.WriteString(m.getErrorStyle().Render("‚ùå " + m.urlError))
		s.WriteString("\n")
	}

	s.WriteString(m.formatKeyHelp("Enter", "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –Ω–∞–∑–≤–∞–Ω–∏—é", "Esc", "–æ—Ç–º–µ–Ω–∞"))
	return s.String()
}

func (m Model) renderAddTitleView() string {
	var s strings.Builder
	s.WriteString(m.getHeaderStyle().Render("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç - –ù–∞–∑–≤–∞–Ω–∏–µ"))
	s.WriteString("\n\n")
	s.WriteString(fmt.Sprintf("–°—Å—ã–ª–∫–∞: %s\n", m.tempURL))
	s.WriteString("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞:\n")
	s.WriteString(m.getInputStyle().Render(m.textInput.View()))
	s.WriteString("\n")
	s.WriteString(m.formatKeyHelp("Enter", "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∏–∫–µ—Ç", "Esc", "–æ—Ç–º–µ–Ω–∞"))
	return s.String()
}

func (m Model) renderConfirmDeleteView() string {
	var s strings.Builder
	s.WriteString(m.getHeaderStyle().Render("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"))
	s.WriteString("\n\n")

	// Find the ticket to delete
	var ticketTitle string
	for _, ticket := range m.storage.Tickets {
		if ticket.ID == m.ticketToDelete {
			ticketTitle = ticket.Title
			break
		}
	}

	s.WriteString(fmt.Sprintf("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ç?\n"))
	s.WriteString(fmt.Sprintf("–¢–∏–∫–µ—Ç: #%d - %s\n", m.ticketToDelete, ticketTitle))
	s.WriteString(m.formatKeyHelp("y/Enter", "–¥–∞, —É–¥–∞–ª–∏—Ç—å", "n/Esc", "–Ω–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å"))
	return s.String()
}

func (m Model) renderImportView() string {
	var s strings.Builder
	s.WriteString(m.getHeaderStyle().Render("–ò–º–ø–æ—Ä—Ç —Ç–∏–∫–µ—Ç–æ–≤"))
	s.WriteString("\n\n")
	s.WriteString("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ .txt —Ñ–∞–π–ª—É:\n")
	s.WriteString("–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç 'URL - –ù–∞–∑–≤–∞–Ω–∏–µ'\n\n")
	s.WriteString(m.getInputStyle().Render(m.textInput.View()))
	s.WriteString("\n")
	s.WriteString(m.formatKeyHelp("Enter", "–Ω–∞—á–∞—Ç—å –∏–º–ø–æ—Ä—Ç", "Esc", "–æ—Ç–º–µ–Ω–∞"))
	return s.String()
}

func (m Model) renderImportResultView() string {
	var s strings.Builder
	s.WriteString(m.getHeaderStyle().Render("–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞"))
	s.WriteString("\n\n")

	if m.importResult != nil {
		s.WriteString(fmt.Sprintf("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–∏–∫–µ—Ç–æ–≤: %d\n", m.importResult.Added))
		s.WriteString(fmt.Sprintf("üîÑ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ: %d\n", m.importResult.Duplicates))
		s.WriteString(fmt.Sprintf("‚ùå –û—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∞: %d\n", m.importResult.Errors))

		if len(m.importResult.ErrorLines) > 0 {
			s.WriteString("\n–û—à–∏–±–∫–∏:\n")
			for _, errLine := range m.importResult.ErrorLines {
				s.WriteString(fmt.Sprintf("  ‚Ä¢ %s\n", errLine))
			}
		}
	}

	s.WriteString("\n")
	s.WriteString(m.formatKeyHelp("Enter/Esc/–ü—Ä–æ–±–µ–ª", "–≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É"))
	return s.String()
}

func (m Model) renderBackupsView() string {
	var s strings.Builder
	s.WriteString(m.getHeaderStyle().Render("–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏"))
	s.WriteString("\n\n")

	if len(m.backups) == 0 {
		s.WriteString("–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n")
	} else {
		s.WriteString(fmt.Sprintf("–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: %d\n\n", len(m.backups)))
		for i, backup := range m.backups {
			if i == m.selectedBackupIndex {
				// Highlight selected backup
				s.WriteString(lipgloss.NewStyle().
					Foreground(lipgloss.Color("15")).
					Background(lipgloss.Color("12")).
					Padding(0, 1).
					Render(fmt.Sprintf("> %s", backup)))
			} else {
				s.WriteString(fmt.Sprintf("  %s", backup))
			}
			s.WriteString("\n")
		}
	}

	s.WriteString("\n")
	s.WriteString(m.formatKeyHelp("‚Üë/‚Üì", "–Ω–∞–≤–∏–≥–∞—Ü–∏—è", "Enter", "–≤—ã–±—Ä–∞—Ç—å", "Esc", "–æ—Ç–º–µ–Ω–∞"))
	return s.String()
}

func (m Model) renderConfirmRestoreView() string {
	var s strings.Builder
	s.WriteString(m.getHeaderStyle().Render("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"))
	s.WriteString("\n\n")
	s.WriteString(fmt.Sprintf("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏?\n"))
	s.WriteString(fmt.Sprintf("–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: %s\n\n", m.backupToRestore))
	s.WriteString("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –∑–∞–º–µ–Ω–∏—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ —Ç–∏–∫–µ—Ç—ã!\n")
	s.WriteString(m.formatKeyHelp("y/Enter", "–¥–∞, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "n/Esc", "–Ω–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å"))
	return s.String()
}

// Style helpers
func (m Model) getHeaderStyle() lipgloss.Style {
	return lipgloss.NewStyle().
		Foreground(lipgloss.Color("86")).
		Bold(true).
		Padding(1, 2)
}

func (m Model) getInputStyle() lipgloss.Style {
	return lipgloss.NewStyle().
		Border(lipgloss.RoundedBorder()).
		BorderForeground(lipgloss.Color("62")).
		Padding(0, 1)
}

func (m Model) getErrorStyle() lipgloss.Style {
	return lipgloss.NewStyle().
		Foreground(lipgloss.Color("9")).
		Bold(true)
}

func (m Model) getKeyStyle() lipgloss.Style {
	return lipgloss.NewStyle().
		Foreground(lipgloss.Color("12")).
		Bold(true)
}

func (m Model) getActionStyle() lipgloss.Style {
	return lipgloss.NewStyle().
		Foreground(lipgloss.Color("250"))
}

func (m Model) getHelpStyle() lipgloss.Style {
	return lipgloss.NewStyle().
		Border(lipgloss.RoundedBorder()).
		BorderForeground(lipgloss.Color("240")).
		Padding(0, 1).
		MarginTop(1)
}

// formatKeyHelp formats key help pairs
func (m Model) formatKeyHelp(pairs ...string) string {
	if len(pairs)%2 != 0 {
		return ""
	}
	var helpParts []string
	for i := 0; i < len(pairs); i += 2 {
		key := pairs[i]
		action := pairs[i+1]
		helpParts = append(helpParts, m.getKeyStyle().Render(key)+" - "+m.getActionStyle().Render(action))
	}
	return m.getHelpStyle().Render(strings.Join(helpParts, " ‚Ä¢ "))
}